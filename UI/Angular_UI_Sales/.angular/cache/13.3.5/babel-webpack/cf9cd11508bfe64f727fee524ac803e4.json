{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport { Validators } from '@angular/forms';\nlet BasketComponent = class BasketComponent {\n  constructor(activatedRoute, productService, configService, them, router, formBuilder, translate) {\n    this.activatedRoute = activatedRoute;\n    this.productService = productService;\n    this.configService = configService;\n    this.them = them;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.translate = translate;\n    this.ParamName = \"Re\";\n    this.ProductGroup = '0';\n    this.visibleBasket = false;\n    this.visibleDetails = false;\n    this.isSubmitted = false;\n    this.isSubmittedComment = false;\n    this.Total = 0;\n    this.id = '0';\n    this.basket = '0';\n    this.Product = [];\n    this.ProductDetails = [];\n    this.ProductGroupBy = [];\n    this._ComparisonProduct = [];\n    this.SY = 0;\n    let data = this.productService.Order.OrderDetails;\n    console.log('data', data);\n  }\n\n  ngOnInit() {\n    this.UserName = '';\n    this.Lang = this.productService.Lang;\n    console.log('retrievedObject__: ', this.productService.Order.OrderDetails);\n    this.productService.Order.OrderDetails = JSON.parse(localStorage.getItem('basket'));\n    console.log('retrievedObject: ', JSON.parse(localStorage.getItem('basket'))); //--------------صفحه سبد خرید\n\n    this.productService.onPageGroupSelect(3);\n    this.CustomerForm = this.formBuilder.group({\n      CodeMelli: ['', [Validators.required]],\n      Email: ['', [Validators.required]],\n      Mobile: ['', [Validators.required]],\n      Address: ['', [Validators.required]],\n      FullName: ['', [Validators.required]],\n      Description: [''],\n      CustomerID: [null],\n      City: ['', [Validators.required]],\n      Confirm: [false, [Validators.required]]\n    }, {\n      validator: this.ValidConfirm()\n    });\n    this.UserComment = this.formBuilder.group({\n      FullName: [''],\n      Description: ['', [Validators.required]],\n      ProductID: ['']\n    });\n    var element = document.getElementById('Arzan');\n    element.style.backgroundColor = this.them.ButtonColor;\n    element.style.color = this.them.ButtonFontColor;\n  } //End ngOnInit\n\n\n  scrollPage(scroll) {\n    window.scroll({\n      top: scroll,\n      behavior: 'smooth'\n    });\n  }\n\n  get formControlsCustomer() {\n    return this.CustomerForm.controls;\n  }\n\n  get formControlsUserComment() {\n    return this.UserComment.controls;\n  } //------------Add to basket-----------------------------------------------\n  //-------افزودن به سبد خرید*********************************************\n\n\n  onSelectProductOrder(ProductID) {\n    this.configService.Fetch_FilterProductID(this.Lang, this.UserName, ProductID.toString()).subscribe(data => {\n      let count = this.productService.Order.OrderDetails.filter(a => a.ProductID == ProductID).length;\n      let OrderDetail = {\n        ProductID: data[0].ID,\n        ProducName: data[0].Name,\n        ShoppingCount: Number(count + 1),\n        AvalaibleCount: Number(data[0].AvailableCount),\n        UnitPrice: data[0].PriceSales,\n        TotalPrice: Number(data[0].PriceSales) * Number(count + 1),\n        TotalDiscount: Number(data[0].DiscountPrice) * Number(count + 1),\n        Total: 0,\n        OrderID: null,\n        CompanyID: this.them.CompanyID\n      }; //const sum = this.productService.Order.OrderDetails.reduce((sum, current) => sum + Number(current.UnitPrice) * Number(current.ShoppingCount), 0);\n\n      if (OrderDetail.AvalaibleCount >= OrderDetail.ShoppingCount) {\n        this.productService.Order.OrderDetails.push(OrderDetail);\n        this.Total = this.productService.Order.OrderDetails.reduce((sum, current) => sum + Number(current.UnitPrice) * Number(current.ShoppingCount), 0);\n        this.TotalDiscount = this.productService.Order.OrderDetails.reduce((sum, current) => sum + Number(current.TotalDiscount), 0);\n        this.Total = Number(this.Total) - Number(this.TotalDiscount); //-------------------------------\n\n        window.scroll({\n          top: 0,\n          behavior: 'smooth'\n        }); //----------------------------\n\n        this.them.TotalShopping = this.productService.Order.OrderDetails.length.toString();\n      } else {\n        if (this.them.Lang == 'fa') {\n          Swal.fire({\n            title: 'خطا!',\n            text: 'موجودی محصول کافی نیست',\n            icon: 'error',\n            confirmButtonText: 'تایید',\n            confirmButtonColor: this.them.ButtonColor\n          });\n        } else {\n          Swal.fire({\n            title: 'Error!',\n            text: 'product inventory is not enough',\n            icon: 'error',\n            confirmButtonText: 'OK',\n            confirmButtonColor: this.them.ButtonColor\n          });\n        }\n      }\n    });\n  }\n\n  AddBasket() {\n    window.scroll({\n      top: 350,\n      behavior: 'smooth'\n    }); //---------------نمایش همه لیست-----------------------\n    //if (this.Product.length == 0) {\n    //  this.SearchProduct(null);\n    //}\n  }\n\n  onCloseDetails() {\n    window.scroll({\n      top: 350,\n      behavior: 'smooth'\n    }); //---------------نمایش همه لیست-----------------------\n    //if (this.Product.length == 0) {\n    //  this.SearchProduct(null);\n    //}\n  }\n\n  DeleteBasket(ProductID) {\n    this.productService.Order.OrderDetails = this.productService.Order.OrderDetails.filter(a => a.ProductID != ProductID);\n    this.Total = this.productService.Order.OrderDetails.reduce((sum, current) => sum + Number(current.UnitPrice) * Number(current.ShoppingCount), 0);\n    this.them.TotalShopping = this.productService.Order.OrderDetails.length.toString();\n  }\n\n  AvalaibleCount() {\n    this.productService.Order.OrderDetails.forEach(a => {\n      if (a.AvalaibleCount < a.ShoppingCount) {\n        a.ShoppingCount = a.AvalaibleCount;\n\n        if (this.them.Lang == 'fa') {\n          Swal.fire({\n            title: 'خطا!',\n            text: 'موجودی محصول کافی نیست',\n            icon: 'error',\n            confirmButtonText: 'تایید',\n            confirmButtonColor: this.them.ButtonColor\n          });\n        } else {\n          Swal.fire({\n            title: 'Error!',\n            text: 'product inventory is not enough',\n            icon: 'error',\n            confirmButtonText: 'OK',\n            confirmButtonColor: this.them.ButtonColor\n          });\n        }\n      }\n    });\n    this.Total = this.productService.Order.OrderDetails.reduce((sum, current) => sum + Number(current.UnitPrice) * Number(current.ShoppingCount), 0);\n    this.TotalDiscount = this.productService.Order.OrderDetails.reduce((sum, current) => sum + Number(current.TotalDiscount), 0);\n    this.Total = Number(this.Total) - Number(this.TotalDiscount);\n  }\n\n  onSearchCustomer(Mobile, Email, CodeMelli) {\n    this.configService.Fetch_FilterCustomerGet(this.Lang, '', null, this.them.CompanyID, Mobile, Email, '', CodeMelli).subscribe(data => {\n      this.formControlsCustomer.Address.patchValue(data[0].Address);\n      this.formControlsCustomer.City.patchValue(data[0].City);\n      this.formControlsCustomer.CustomerID.patchValue(data[0].ID);\n      this.formControlsCustomer.FullName.patchValue(data[0].FullName);\n    });\n  }\n\n  SaveOrder() {\n    this.isSubmitted = true;\n\n    if (this.CustomerForm.invalid) {\n      return;\n    } else {\n      this.them.loading = true;\n      this.productService.Order.Address = this.CustomerForm.controls.Address.value;\n      this.productService.Order.City = this.CustomerForm.controls.City.value;\n      this.productService.Order.CustomerID = this.CustomerForm.controls.CustomerID.value;\n      this.productService.Order.FullName = this.CustomerForm.controls.FullName.value;\n      this.productService.Order.Description = this.CustomerForm.controls.Description.value;\n      this.productService.Order.Email = this.CustomerForm.controls.Email.value;\n      this.productService.Order.Mobile = this.CustomerForm.controls.Mobile.value;\n      this.productService.Order.CodeMelli = this.CustomerForm.controls.CodeMelli.value;\n      this.productService.Order.CompanyID = this.them.CompanyID;\n      this.productService.Order.Total = this.Total;\n      this.productService.Order.TotalDiscount = this.TotalDiscount;\n      this.configService.InsertOrder(this.productService.Order).subscribe(data => {\n        this.them.loading = false; //------------درگاه نداشته باشد.\n\n        if (data.status == 10) {\n          if (this.Lang == 'fa') {\n            Swal.fire({\n              title: 'پیغام!',\n              text: 'با تشکر ، نظر شما با موفقیت ثبت شد سفارش شما با موفقیت ثبت شد به زودی با شما تماس گرفته خواهد شد',\n              icon: 'success',\n              confirmButtonText: 'تایید',\n              confirmButtonColor: this.them.ButtonColor\n            });\n          } else {\n            Swal.fire({\n              title: 'Message!',\n              text: 'Your order has been successfully registered and you will be contacted soon',\n              icon: 'success',\n              confirmButtonText: 'OK',\n              confirmButtonColor: this.them.ButtonColor\n            });\n          }\n        } //------------اگر خطا در بانک صورت گرفته شده باشد.\n\n\n        if (data.status == 0) {\n          document.location.href = data.location;\n        } //this.router.navigate(['/shopping-basket'], { queryParams: { id: data[0].CustomerID } });\n\n      });\n    }\n  }\n\n  ValidConfirm() {\n    return formGroup => {\n      const control = formGroup.controls[\"Confirm\"];\n\n      if (control.errors) {\n        // return if another validator has already found an error on the matchingControl\n        return;\n      } // set error on matchingControl if validation fails\n\n\n      if (control.value == false) {\n        control.setErrors({\n          ValidConfirm: true\n        });\n      } else {\n        control.setErrors(null);\n      }\n    };\n  }\n\n  onProductDetail(id) {\n    this.them.ScrollY = window.scrollY;\n    this.router.navigate(['/p/' + id]);\n  }\n\n};\nBasketComponent = __decorate([Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n  styleUrls: ['./basket.component.css']\n})], BasketComponent);\nexport { BasketComponent };","map":null,"metadata":{},"sourceType":"module"}